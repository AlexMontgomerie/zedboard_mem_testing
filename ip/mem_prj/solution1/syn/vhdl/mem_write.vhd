-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mem_write is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    test_init_arr_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    test_init_arr_V_ce0 : OUT STD_LOGIC;
    test_init_arr_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of mem_write is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv23_7FFE00 : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111000000000";
    constant ap_const_lv23_1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv23_7FFDFF : STD_LOGIC_VECTOR (22 downto 0) := "11111111111110111111111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_stream_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_V_data_V_1_vld_in : STD_LOGIC;
    signal out_stream_V_data_V_1_vld_out : STD_LOGIC;
    signal out_stream_V_data_V_1_ack_in : STD_LOGIC;
    signal out_stream_V_data_V_1_ack_out : STD_LOGIC;
    signal out_stream_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_V_data_V_1_sel : STD_LOGIC;
    signal out_stream_V_data_V_1_load_A : STD_LOGIC;
    signal out_stream_V_data_V_1_load_B : STD_LOGIC;
    signal out_stream_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal out_stream_V_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal out_stream_V_keep_V_1_vld_in : STD_LOGIC;
    signal out_stream_V_keep_V_1_vld_out : STD_LOGIC;
    signal out_stream_V_keep_V_1_ack_in : STD_LOGIC;
    signal out_stream_V_keep_V_1_ack_out : STD_LOGIC;
    signal out_stream_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_keep_V_1_sel : STD_LOGIC;
    signal out_stream_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal out_stream_V_strb_V_1_vld_in : STD_LOGIC;
    signal out_stream_V_strb_V_1_vld_out : STD_LOGIC;
    signal out_stream_V_strb_V_1_ack_in : STD_LOGIC;
    signal out_stream_V_strb_V_1_ack_out : STD_LOGIC;
    signal out_stream_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_strb_V_1_sel : STD_LOGIC;
    signal out_stream_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_user_V_1_vld_in : STD_LOGIC;
    signal out_stream_V_user_V_1_vld_out : STD_LOGIC;
    signal out_stream_V_user_V_1_ack_in : STD_LOGIC;
    signal out_stream_V_user_V_1_ack_out : STD_LOGIC;
    signal out_stream_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_V_user_V_1_sel : STD_LOGIC;
    signal out_stream_V_user_V_1_load_A : STD_LOGIC;
    signal out_stream_V_user_V_1_load_B : STD_LOGIC;
    signal out_stream_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal out_stream_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_last_V_1_vld_in : STD_LOGIC;
    signal out_stream_V_last_V_1_vld_out : STD_LOGIC;
    signal out_stream_V_last_V_1_ack_in : STD_LOGIC;
    signal out_stream_V_last_V_1_ack_out : STD_LOGIC;
    signal out_stream_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_V_last_V_1_sel : STD_LOGIC;
    signal out_stream_V_last_V_1_load_A : STD_LOGIC;
    signal out_stream_V_last_V_1_load_B : STD_LOGIC;
    signal out_stream_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal out_stream_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_id_V_1_vld_in : STD_LOGIC;
    signal out_stream_V_id_V_1_vld_out : STD_LOGIC;
    signal out_stream_V_id_V_1_ack_in : STD_LOGIC;
    signal out_stream_V_id_V_1_ack_out : STD_LOGIC;
    signal out_stream_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_id_V_1_sel : STD_LOGIC;
    signal out_stream_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_dest_V_1_vld_in : STD_LOGIC;
    signal out_stream_V_dest_V_1_vld_out : STD_LOGIC;
    signal out_stream_V_dest_V_1_ack_in : STD_LOGIC;
    signal out_stream_V_dest_V_1_ack_out : STD_LOGIC;
    signal out_stream_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_dest_V_1_sel : STD_LOGIC;
    signal out_stream_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten_reg_253 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_253 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_130 : STD_LOGIC_VECTOR (22 downto 0);
    signal i_reg_141 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_user_V_reg_152 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_167 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_flatten_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next_fu_184_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_mid2_v_v_fu_210_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_mid2_v_v_reg_262 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_last_V_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_267 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_247_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_mux_i_phi_fu_145_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_phi_mux_tmp_user_V_phi_fu_158_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal exitcond6_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_fu_204_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_mid2_fu_196_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_cast3_fu_226_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_mid2_fu_218_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_2_fu_230_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((out_stream_V_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_V_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_V_data_V_1_ack_in = ap_const_logic_0) or (out_stream_V_id_V_1_ack_in = ap_const_logic_0) or (out_stream_V_last_V_1_ack_in = ap_const_logic_0) or (out_stream_V_user_V_1_ack_in = ap_const_logic_0) or (out_stream_V_strb_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_data_V_1_ack_out = ap_const_logic_1) and (out_stream_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_data_V_1_sel_rd <= not(out_stream_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_stream_V_data_V_1_ack_in = ap_const_logic_1) and (out_stream_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        out_stream_V_data_V_1_sel_wr <= not(out_stream_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_data_V_1_state = ap_const_lv2_2) and (out_stream_V_data_V_1_vld_in = ap_const_logic_0)) or ((out_stream_V_data_V_1_state = ap_const_lv2_3) and (out_stream_V_data_V_1_vld_in = ap_const_logic_0) and (out_stream_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_data_V_1_state = ap_const_lv2_1) and (out_stream_V_data_V_1_ack_out = ap_const_logic_0)) or ((out_stream_V_data_V_1_state = ap_const_lv2_3) and (out_stream_V_data_V_1_ack_out = ap_const_logic_0) and (out_stream_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_data_V_1_vld_in = ap_const_logic_0) and (out_stream_V_data_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_V_data_V_1_ack_out = ap_const_logic_0) and (out_stream_V_data_V_1_vld_in = ap_const_logic_1))) and (out_stream_V_data_V_1_state = ap_const_lv2_3)) or ((out_stream_V_data_V_1_state = ap_const_lv2_1) and (out_stream_V_data_V_1_ack_out = ap_const_logic_1)) or ((out_stream_V_data_V_1_state = ap_const_lv2_2) and (out_stream_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_dest_V_1_ack_out = ap_const_logic_1) and (out_stream_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_dest_V_1_sel_rd <= not(out_stream_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_dest_V_1_state = ap_const_lv2_2) and (out_stream_V_dest_V_1_vld_in = ap_const_logic_0)) or ((out_stream_V_dest_V_1_state = ap_const_lv2_3) and (out_stream_V_dest_V_1_vld_in = ap_const_logic_0) and (out_stream_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_dest_V_1_state = ap_const_lv2_1) and (out_stream_V_dest_V_1_ack_out = ap_const_logic_0)) or ((out_stream_V_dest_V_1_state = ap_const_lv2_3) and (out_stream_V_dest_V_1_ack_out = ap_const_logic_0) and (out_stream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_dest_V_1_vld_in = ap_const_logic_0) and (out_stream_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_V_dest_V_1_ack_out = ap_const_logic_0) and (out_stream_V_dest_V_1_vld_in = ap_const_logic_1))) and (out_stream_V_dest_V_1_state = ap_const_lv2_3)) or ((out_stream_V_dest_V_1_state = ap_const_lv2_1) and (out_stream_V_dest_V_1_ack_out = ap_const_logic_1)) or ((out_stream_V_dest_V_1_state = ap_const_lv2_2) and (out_stream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_id_V_1_ack_out = ap_const_logic_1) and (out_stream_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_id_V_1_sel_rd <= not(out_stream_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_id_V_1_state = ap_const_lv2_2) and (out_stream_V_id_V_1_vld_in = ap_const_logic_0)) or ((out_stream_V_id_V_1_state = ap_const_lv2_3) and (out_stream_V_id_V_1_vld_in = ap_const_logic_0) and (out_stream_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_id_V_1_state = ap_const_lv2_1) and (out_stream_V_id_V_1_ack_out = ap_const_logic_0)) or ((out_stream_V_id_V_1_state = ap_const_lv2_3) and (out_stream_V_id_V_1_ack_out = ap_const_logic_0) and (out_stream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_id_V_1_vld_in = ap_const_logic_0) and (out_stream_V_id_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_V_id_V_1_ack_out = ap_const_logic_0) and (out_stream_V_id_V_1_vld_in = ap_const_logic_1))) and (out_stream_V_id_V_1_state = ap_const_lv2_3)) or ((out_stream_V_id_V_1_state = ap_const_lv2_1) and (out_stream_V_id_V_1_ack_out = ap_const_logic_1)) or ((out_stream_V_id_V_1_state = ap_const_lv2_2) and (out_stream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_keep_V_1_ack_out = ap_const_logic_1) and (out_stream_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_keep_V_1_sel_rd <= not(out_stream_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_keep_V_1_state = ap_const_lv2_2) and (out_stream_V_keep_V_1_vld_in = ap_const_logic_0)) or ((out_stream_V_keep_V_1_state = ap_const_lv2_3) and (out_stream_V_keep_V_1_vld_in = ap_const_logic_0) and (out_stream_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_keep_V_1_state = ap_const_lv2_1) and (out_stream_V_keep_V_1_ack_out = ap_const_logic_0)) or ((out_stream_V_keep_V_1_state = ap_const_lv2_3) and (out_stream_V_keep_V_1_ack_out = ap_const_logic_0) and (out_stream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_keep_V_1_vld_in = ap_const_logic_0) and (out_stream_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_V_keep_V_1_ack_out = ap_const_logic_0) and (out_stream_V_keep_V_1_vld_in = ap_const_logic_1))) and (out_stream_V_keep_V_1_state = ap_const_lv2_3)) or ((out_stream_V_keep_V_1_state = ap_const_lv2_1) and (out_stream_V_keep_V_1_ack_out = ap_const_logic_1)) or ((out_stream_V_keep_V_1_state = ap_const_lv2_2) and (out_stream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_last_V_1_ack_out = ap_const_logic_1) and (out_stream_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_last_V_1_sel_rd <= not(out_stream_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_stream_V_last_V_1_ack_in = ap_const_logic_1) and (out_stream_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        out_stream_V_last_V_1_sel_wr <= not(out_stream_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_last_V_1_state = ap_const_lv2_2) and (out_stream_V_last_V_1_vld_in = ap_const_logic_0)) or ((out_stream_V_last_V_1_state = ap_const_lv2_3) and (out_stream_V_last_V_1_vld_in = ap_const_logic_0) and (out_stream_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_last_V_1_state = ap_const_lv2_1) and (out_stream_V_last_V_1_ack_out = ap_const_logic_0)) or ((out_stream_V_last_V_1_state = ap_const_lv2_3) and (out_stream_V_last_V_1_ack_out = ap_const_logic_0) and (out_stream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_last_V_1_vld_in = ap_const_logic_0) and (out_stream_V_last_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_V_last_V_1_ack_out = ap_const_logic_0) and (out_stream_V_last_V_1_vld_in = ap_const_logic_1))) and (out_stream_V_last_V_1_state = ap_const_lv2_3)) or ((out_stream_V_last_V_1_state = ap_const_lv2_1) and (out_stream_V_last_V_1_ack_out = ap_const_logic_1)) or ((out_stream_V_last_V_1_state = ap_const_lv2_2) and (out_stream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_strb_V_1_ack_out = ap_const_logic_1) and (out_stream_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_strb_V_1_sel_rd <= not(out_stream_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_strb_V_1_state = ap_const_lv2_2) and (out_stream_V_strb_V_1_vld_in = ap_const_logic_0)) or ((out_stream_V_strb_V_1_state = ap_const_lv2_3) and (out_stream_V_strb_V_1_vld_in = ap_const_logic_0) and (out_stream_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_strb_V_1_state = ap_const_lv2_1) and (out_stream_V_strb_V_1_ack_out = ap_const_logic_0)) or ((out_stream_V_strb_V_1_state = ap_const_lv2_3) and (out_stream_V_strb_V_1_ack_out = ap_const_logic_0) and (out_stream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_strb_V_1_vld_in = ap_const_logic_0) and (out_stream_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_V_strb_V_1_ack_out = ap_const_logic_0) and (out_stream_V_strb_V_1_vld_in = ap_const_logic_1))) and (out_stream_V_strb_V_1_state = ap_const_lv2_3)) or ((out_stream_V_strb_V_1_state = ap_const_lv2_1) and (out_stream_V_strb_V_1_ack_out = ap_const_logic_1)) or ((out_stream_V_strb_V_1_state = ap_const_lv2_2) and (out_stream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_user_V_1_ack_out = ap_const_logic_1) and (out_stream_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_user_V_1_sel_rd <= not(out_stream_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_stream_V_user_V_1_ack_in = ap_const_logic_1) and (out_stream_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        out_stream_V_user_V_1_sel_wr <= not(out_stream_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_user_V_1_state = ap_const_lv2_2) and (out_stream_V_user_V_1_vld_in = ap_const_logic_0)) or ((out_stream_V_user_V_1_state = ap_const_lv2_3) and (out_stream_V_user_V_1_vld_in = ap_const_logic_0) and (out_stream_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_user_V_1_state = ap_const_lv2_1) and (out_stream_V_user_V_1_ack_out = ap_const_logic_0)) or ((out_stream_V_user_V_1_state = ap_const_lv2_3) and (out_stream_V_user_V_1_ack_out = ap_const_logic_0) and (out_stream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_user_V_1_vld_in = ap_const_logic_0) and (out_stream_V_user_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_V_user_V_1_ack_out = ap_const_logic_0) and (out_stream_V_user_V_1_vld_in = ap_const_logic_1))) and (out_stream_V_user_V_1_state = ap_const_lv2_3)) or ((out_stream_V_user_V_1_state = ap_const_lv2_1) and (out_stream_V_user_V_1_ack_out = ap_const_logic_1)) or ((out_stream_V_user_V_1_state = ap_const_lv2_2) and (out_stream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_253 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_141 <= tmp_mid2_v_v_reg_262;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_141 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_178_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_130 <= indvar_flatten_next_fu_184_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_130 <= ap_const_lv23_0;
            end if; 
        end if;
    end process;

    j_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_178_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_167 <= j_1_fu_247_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_reg_167 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    tmp_user_V_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter1_exitcond_flatten_reg_253 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                tmp_user_V_reg_152 <= ap_const_lv1_0;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp_user_V_reg_152 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_exitcond_flatten_reg_253 <= exitcond_flatten_reg_253;
                exitcond_flatten_reg_253 <= exitcond_flatten_fu_178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_data_V_1_load_A = ap_const_logic_1)) then
                out_stream_V_data_V_1_payload_A <= test_init_arr_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_data_V_1_load_B = ap_const_logic_1)) then
                out_stream_V_data_V_1_payload_B <= test_init_arr_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_last_V_1_load_A = ap_const_logic_1)) then
                out_stream_V_last_V_1_payload_A <= tmp_last_V_reg_267;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_last_V_1_load_B = ap_const_logic_1)) then
                out_stream_V_last_V_1_payload_B <= tmp_last_V_reg_267;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_user_V_1_load_A = ap_const_logic_1)) then
                out_stream_V_user_V_1_payload_A <= ap_phi_mux_tmp_user_V_phi_fu_158_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_user_V_1_load_B = ap_const_logic_1)) then
                out_stream_V_user_V_1_payload_B <= ap_phi_mux_tmp_user_V_phi_fu_158_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_178_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_last_V_reg_267 <= tmp_last_V_fu_236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_178_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_mid2_v_v_reg_262 <= tmp_mid2_v_v_fu_210_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, out_stream_V_data_V_1_ack_in, out_stream_V_keep_V_1_ack_in, out_stream_V_strb_V_1_ack_in, out_stream_V_user_V_1_ack_in, out_stream_V_last_V_1_ack_in, out_stream_V_id_V_1_ack_in, out_stream_V_dest_V_1_ack_in, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, exitcond_flatten_fu_178_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_flatten_fu_178_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_flatten_fu_178_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((out_stream_V_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_V_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_V_data_V_1_ack_in = ap_const_logic_0) or (out_stream_V_id_V_1_ack_in = ap_const_logic_0) or (out_stream_V_last_V_1_ack_in = ap_const_logic_0) or (out_stream_V_user_V_1_ack_in = ap_const_logic_0) or (out_stream_V_strb_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state3_io, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state3_io, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(out_stream_V_data_V_1_ack_in, exitcond_flatten_reg_253)
    begin
                ap_block_state3_io <= ((exitcond_flatten_reg_253 = ap_const_lv1_0) and (out_stream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(out_stream_V_data_V_1_ack_in, ap_reg_pp0_iter1_exitcond_flatten_reg_253)
    begin
                ap_block_state4_io <= ((ap_reg_pp0_iter1_exitcond_flatten_reg_253 = ap_const_lv1_0) and (out_stream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_assign_proc : process(out_stream_V_data_V_1_ack_in, out_stream_V_keep_V_1_ack_in, out_stream_V_strb_V_1_ack_in, out_stream_V_user_V_1_ack_in, out_stream_V_last_V_1_ack_in, out_stream_V_id_V_1_ack_in, out_stream_V_dest_V_1_ack_in)
    begin
                ap_block_state5 <= ((out_stream_V_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_V_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_V_data_V_1_ack_in = ap_const_logic_0) or (out_stream_V_id_V_1_ack_in = ap_const_logic_0) or (out_stream_V_last_V_1_ack_in = ap_const_logic_0) or (out_stream_V_user_V_1_ack_in = ap_const_logic_0) or (out_stream_V_strb_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_178_p2)
    begin
        if ((exitcond_flatten_fu_178_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, out_stream_V_data_V_1_ack_in, out_stream_V_keep_V_1_ack_in, out_stream_V_strb_V_1_ack_in, out_stream_V_user_V_1_ack_in, out_stream_V_last_V_1_ack_in, out_stream_V_id_V_1_ack_in, out_stream_V_dest_V_1_ack_in, ap_CS_fsm_state5)
    begin
        if ((not(((out_stream_V_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_V_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_V_data_V_1_ack_in = ap_const_logic_0) or (out_stream_V_id_V_1_ack_in = ap_const_logic_0) or (out_stream_V_last_V_1_ack_in = ap_const_logic_0) or (out_stream_V_user_V_1_ack_in = ap_const_logic_0) or (out_stream_V_strb_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_145_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_253, i_reg_141, tmp_mid2_v_v_reg_262)
    begin
        if (((exitcond_flatten_reg_253 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_145_p4 <= tmp_mid2_v_v_reg_262;
        else 
            ap_phi_mux_i_phi_fu_145_p4 <= i_reg_141;
        end if; 
    end process;


    ap_phi_mux_tmp_user_V_phi_fu_158_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_exitcond_flatten_reg_253, tmp_user_V_reg_152)
    begin
        if (((ap_reg_pp0_iter1_exitcond_flatten_reg_253 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_tmp_user_V_phi_fu_158_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_tmp_user_V_phi_fu_158_p4 <= tmp_user_V_reg_152;
        end if; 
    end process;


    ap_ready_assign_proc : process(out_stream_V_data_V_1_ack_in, out_stream_V_keep_V_1_ack_in, out_stream_V_strb_V_1_ack_in, out_stream_V_user_V_1_ack_in, out_stream_V_last_V_1_ack_in, out_stream_V_id_V_1_ack_in, out_stream_V_dest_V_1_ack_in, ap_CS_fsm_state5)
    begin
        if ((not(((out_stream_V_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_V_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_V_data_V_1_ack_in = ap_const_logic_0) or (out_stream_V_id_V_1_ack_in = ap_const_logic_0) or (out_stream_V_last_V_1_ack_in = ap_const_logic_0) or (out_stream_V_user_V_1_ack_in = ap_const_logic_0) or (out_stream_V_strb_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond6_fu_190_p2 <= "1" when (j_reg_167 = ap_const_lv10_200) else "0";
    exitcond_flatten_fu_178_p2 <= "1" when (indvar_flatten_reg_130 = ap_const_lv23_7FFE00) else "0";
    i_s_fu_204_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_145_p4) + unsigned(ap_const_lv14_1));
    indvar_flatten_next_fu_184_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_130) + unsigned(ap_const_lv23_1));
    j_1_fu_247_p2 <= std_logic_vector(unsigned(j_mid2_fu_196_p3) + unsigned(ap_const_lv10_1));
    j_cast3_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_fu_196_p3),23));
    j_mid2_fu_196_p3 <= 
        ap_const_lv10_0 when (exitcond6_fu_190_p2(0) = '1') else 
        j_reg_167;
    out_r_TDATA <= out_stream_V_data_V_1_data_out;

    out_r_TDATA_blk_n_assign_proc : process(out_stream_V_data_V_1_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_253, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_exitcond_flatten_reg_253)
    begin
        if ((((ap_reg_pp0_iter1_exitcond_flatten_reg_253 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((exitcond_flatten_reg_253 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            out_r_TDATA_blk_n <= out_stream_V_data_V_1_state(1);
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TDEST <= out_stream_V_dest_V_1_data_out;
    out_r_TID <= out_stream_V_id_V_1_data_out;
    out_r_TKEEP <= out_stream_V_keep_V_1_data_out;
    out_r_TLAST <= out_stream_V_last_V_1_data_out;
    out_r_TSTRB <= out_stream_V_strb_V_1_data_out;
    out_r_TUSER <= out_stream_V_user_V_1_data_out;
    out_r_TVALID <= out_stream_V_dest_V_1_state(0);
    out_stream_V_data_V_1_ack_in <= out_stream_V_data_V_1_state(1);
    out_stream_V_data_V_1_ack_out <= out_r_TREADY;

    out_stream_V_data_V_1_data_out_assign_proc : process(out_stream_V_data_V_1_payload_A, out_stream_V_data_V_1_payload_B, out_stream_V_data_V_1_sel)
    begin
        if ((out_stream_V_data_V_1_sel = ap_const_logic_1)) then 
            out_stream_V_data_V_1_data_out <= out_stream_V_data_V_1_payload_B;
        else 
            out_stream_V_data_V_1_data_out <= out_stream_V_data_V_1_payload_A;
        end if; 
    end process;

    out_stream_V_data_V_1_load_A <= (out_stream_V_data_V_1_state_cmp_full and not(out_stream_V_data_V_1_sel_wr));
    out_stream_V_data_V_1_load_B <= (out_stream_V_data_V_1_state_cmp_full and out_stream_V_data_V_1_sel_wr);
    out_stream_V_data_V_1_sel <= out_stream_V_data_V_1_sel_rd;
    out_stream_V_data_V_1_state_cmp_full <= '0' when (out_stream_V_data_V_1_state = ap_const_lv2_1) else '1';

    out_stream_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_253, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_253 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_stream_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_data_V_1_vld_out <= out_stream_V_data_V_1_state(0);
    out_stream_V_dest_V_1_ack_in <= out_stream_V_dest_V_1_state(1);
    out_stream_V_dest_V_1_ack_out <= out_r_TREADY;
    out_stream_V_dest_V_1_data_out <= ap_const_lv1_0;
    out_stream_V_dest_V_1_sel <= out_stream_V_dest_V_1_sel_rd;

    out_stream_V_dest_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_253, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_253 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_stream_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_dest_V_1_vld_out <= out_stream_V_dest_V_1_state(0);
    out_stream_V_id_V_1_ack_in <= out_stream_V_id_V_1_state(1);
    out_stream_V_id_V_1_ack_out <= out_r_TREADY;
    out_stream_V_id_V_1_data_out <= ap_const_lv1_0;
    out_stream_V_id_V_1_sel <= out_stream_V_id_V_1_sel_rd;

    out_stream_V_id_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_253, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_253 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_stream_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_id_V_1_vld_out <= out_stream_V_id_V_1_state(0);
    out_stream_V_keep_V_1_ack_in <= out_stream_V_keep_V_1_state(1);
    out_stream_V_keep_V_1_ack_out <= out_r_TREADY;
    out_stream_V_keep_V_1_data_out <= ap_const_lv4_F;
    out_stream_V_keep_V_1_sel <= out_stream_V_keep_V_1_sel_rd;

    out_stream_V_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_253, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_253 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_stream_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_keep_V_1_vld_out <= out_stream_V_keep_V_1_state(0);
    out_stream_V_last_V_1_ack_in <= out_stream_V_last_V_1_state(1);
    out_stream_V_last_V_1_ack_out <= out_r_TREADY;

    out_stream_V_last_V_1_data_out_assign_proc : process(out_stream_V_last_V_1_payload_A, out_stream_V_last_V_1_payload_B, out_stream_V_last_V_1_sel)
    begin
        if ((out_stream_V_last_V_1_sel = ap_const_logic_1)) then 
            out_stream_V_last_V_1_data_out <= out_stream_V_last_V_1_payload_B;
        else 
            out_stream_V_last_V_1_data_out <= out_stream_V_last_V_1_payload_A;
        end if; 
    end process;

    out_stream_V_last_V_1_load_A <= (out_stream_V_last_V_1_state_cmp_full and not(out_stream_V_last_V_1_sel_wr));
    out_stream_V_last_V_1_load_B <= (out_stream_V_last_V_1_state_cmp_full and out_stream_V_last_V_1_sel_wr);
    out_stream_V_last_V_1_sel <= out_stream_V_last_V_1_sel_rd;
    out_stream_V_last_V_1_state_cmp_full <= '0' when (out_stream_V_last_V_1_state = ap_const_lv2_1) else '1';

    out_stream_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_253, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_253 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_stream_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_last_V_1_vld_out <= out_stream_V_last_V_1_state(0);
    out_stream_V_strb_V_1_ack_in <= out_stream_V_strb_V_1_state(1);
    out_stream_V_strb_V_1_ack_out <= out_r_TREADY;
    out_stream_V_strb_V_1_data_out <= ap_const_lv4_0;
    out_stream_V_strb_V_1_sel <= out_stream_V_strb_V_1_sel_rd;

    out_stream_V_strb_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_253, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_253 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_stream_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_strb_V_1_vld_out <= out_stream_V_strb_V_1_state(0);
    out_stream_V_user_V_1_ack_in <= out_stream_V_user_V_1_state(1);
    out_stream_V_user_V_1_ack_out <= out_r_TREADY;

    out_stream_V_user_V_1_data_out_assign_proc : process(out_stream_V_user_V_1_payload_A, out_stream_V_user_V_1_payload_B, out_stream_V_user_V_1_sel)
    begin
        if ((out_stream_V_user_V_1_sel = ap_const_logic_1)) then 
            out_stream_V_user_V_1_data_out <= out_stream_V_user_V_1_payload_B;
        else 
            out_stream_V_user_V_1_data_out <= out_stream_V_user_V_1_payload_A;
        end if; 
    end process;

    out_stream_V_user_V_1_load_A <= (out_stream_V_user_V_1_state_cmp_full and not(out_stream_V_user_V_1_sel_wr));
    out_stream_V_user_V_1_load_B <= (out_stream_V_user_V_1_state_cmp_full and out_stream_V_user_V_1_sel_wr);
    out_stream_V_user_V_1_sel <= out_stream_V_user_V_1_sel_rd;
    out_stream_V_user_V_1_state_cmp_full <= '0' when (out_stream_V_user_V_1_state = ap_const_lv2_1) else '1';

    out_stream_V_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_253, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_253 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_stream_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_user_V_1_vld_out <= out_stream_V_user_V_1_state(0);
    test_init_arr_V_address0 <= tmp_4_fu_242_p1(9 - 1 downto 0);

    test_init_arr_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            test_init_arr_V_ce0 <= ap_const_logic_1;
        else 
            test_init_arr_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_230_p2 <= std_logic_vector(unsigned(j_cast3_fu_226_p1) + unsigned(tmp_mid2_fu_218_p3));
    tmp_4_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_fu_196_p3),64));
    tmp_last_V_fu_236_p2 <= "1" when (tmp_2_fu_230_p2 = ap_const_lv23_7FFDFF) else "0";
    tmp_mid2_fu_218_p3 <= (tmp_mid2_v_v_fu_210_p3 & ap_const_lv9_0);
    tmp_mid2_v_v_fu_210_p3 <= 
        i_s_fu_204_p2 when (exitcond6_fu_190_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_145_p4;
end behav;
