// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mem_write_HH_
#define _mem_write_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct mem_write : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > out_r_TDATA;
    sc_out< sc_logic > out_r_TVALID;
    sc_in< sc_logic > out_r_TREADY;
    sc_out< sc_lv<4> > out_r_TKEEP;
    sc_out< sc_lv<4> > out_r_TSTRB;
    sc_out< sc_lv<1> > out_r_TUSER;
    sc_out< sc_lv<1> > out_r_TLAST;
    sc_out< sc_lv<1> > out_r_TID;
    sc_out< sc_lv<1> > out_r_TDEST;
    sc_out< sc_lv<9> > test_init_arr_V_address0;
    sc_out< sc_logic > test_init_arr_V_ce0;
    sc_in< sc_lv<32> > test_init_arr_V_q0;


    // Module declarations
    mem_write(sc_module_name name);
    SC_HAS_PROCESS(mem_write);

    ~mem_write();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > out_stream_V_data_V_1_data_out;
    sc_signal< sc_logic > out_stream_V_data_V_1_vld_in;
    sc_signal< sc_logic > out_stream_V_data_V_1_vld_out;
    sc_signal< sc_logic > out_stream_V_data_V_1_ack_in;
    sc_signal< sc_logic > out_stream_V_data_V_1_ack_out;
    sc_signal< sc_lv<32> > out_stream_V_data_V_1_payload_A;
    sc_signal< sc_lv<32> > out_stream_V_data_V_1_payload_B;
    sc_signal< sc_logic > out_stream_V_data_V_1_sel_rd;
    sc_signal< sc_logic > out_stream_V_data_V_1_sel_wr;
    sc_signal< sc_logic > out_stream_V_data_V_1_sel;
    sc_signal< sc_logic > out_stream_V_data_V_1_load_A;
    sc_signal< sc_logic > out_stream_V_data_V_1_load_B;
    sc_signal< sc_lv<2> > out_stream_V_data_V_1_state;
    sc_signal< sc_logic > out_stream_V_data_V_1_state_cmp_full;
    sc_signal< sc_lv<4> > out_stream_V_keep_V_1_data_out;
    sc_signal< sc_logic > out_stream_V_keep_V_1_vld_in;
    sc_signal< sc_logic > out_stream_V_keep_V_1_vld_out;
    sc_signal< sc_logic > out_stream_V_keep_V_1_ack_in;
    sc_signal< sc_logic > out_stream_V_keep_V_1_ack_out;
    sc_signal< sc_logic > out_stream_V_keep_V_1_sel_rd;
    sc_signal< sc_logic > out_stream_V_keep_V_1_sel;
    sc_signal< sc_lv<2> > out_stream_V_keep_V_1_state;
    sc_signal< sc_lv<4> > out_stream_V_strb_V_1_data_out;
    sc_signal< sc_logic > out_stream_V_strb_V_1_vld_in;
    sc_signal< sc_logic > out_stream_V_strb_V_1_vld_out;
    sc_signal< sc_logic > out_stream_V_strb_V_1_ack_in;
    sc_signal< sc_logic > out_stream_V_strb_V_1_ack_out;
    sc_signal< sc_logic > out_stream_V_strb_V_1_sel_rd;
    sc_signal< sc_logic > out_stream_V_strb_V_1_sel;
    sc_signal< sc_lv<2> > out_stream_V_strb_V_1_state;
    sc_signal< sc_lv<1> > out_stream_V_user_V_1_data_out;
    sc_signal< sc_logic > out_stream_V_user_V_1_vld_in;
    sc_signal< sc_logic > out_stream_V_user_V_1_vld_out;
    sc_signal< sc_logic > out_stream_V_user_V_1_ack_in;
    sc_signal< sc_logic > out_stream_V_user_V_1_ack_out;
    sc_signal< sc_lv<1> > out_stream_V_user_V_1_payload_A;
    sc_signal< sc_lv<1> > out_stream_V_user_V_1_payload_B;
    sc_signal< sc_logic > out_stream_V_user_V_1_sel_rd;
    sc_signal< sc_logic > out_stream_V_user_V_1_sel_wr;
    sc_signal< sc_logic > out_stream_V_user_V_1_sel;
    sc_signal< sc_logic > out_stream_V_user_V_1_load_A;
    sc_signal< sc_logic > out_stream_V_user_V_1_load_B;
    sc_signal< sc_lv<2> > out_stream_V_user_V_1_state;
    sc_signal< sc_logic > out_stream_V_user_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > out_stream_V_last_V_1_data_out;
    sc_signal< sc_logic > out_stream_V_last_V_1_vld_in;
    sc_signal< sc_logic > out_stream_V_last_V_1_vld_out;
    sc_signal< sc_logic > out_stream_V_last_V_1_ack_in;
    sc_signal< sc_logic > out_stream_V_last_V_1_ack_out;
    sc_signal< sc_lv<1> > out_stream_V_last_V_1_payload_A;
    sc_signal< sc_lv<1> > out_stream_V_last_V_1_payload_B;
    sc_signal< sc_logic > out_stream_V_last_V_1_sel_rd;
    sc_signal< sc_logic > out_stream_V_last_V_1_sel_wr;
    sc_signal< sc_logic > out_stream_V_last_V_1_sel;
    sc_signal< sc_logic > out_stream_V_last_V_1_load_A;
    sc_signal< sc_logic > out_stream_V_last_V_1_load_B;
    sc_signal< sc_lv<2> > out_stream_V_last_V_1_state;
    sc_signal< sc_logic > out_stream_V_last_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > out_stream_V_id_V_1_data_out;
    sc_signal< sc_logic > out_stream_V_id_V_1_vld_in;
    sc_signal< sc_logic > out_stream_V_id_V_1_vld_out;
    sc_signal< sc_logic > out_stream_V_id_V_1_ack_in;
    sc_signal< sc_logic > out_stream_V_id_V_1_ack_out;
    sc_signal< sc_logic > out_stream_V_id_V_1_sel_rd;
    sc_signal< sc_logic > out_stream_V_id_V_1_sel;
    sc_signal< sc_lv<2> > out_stream_V_id_V_1_state;
    sc_signal< sc_lv<1> > out_stream_V_dest_V_1_data_out;
    sc_signal< sc_logic > out_stream_V_dest_V_1_vld_in;
    sc_signal< sc_logic > out_stream_V_dest_V_1_vld_out;
    sc_signal< sc_logic > out_stream_V_dest_V_1_ack_in;
    sc_signal< sc_logic > out_stream_V_dest_V_1_ack_out;
    sc_signal< sc_logic > out_stream_V_dest_V_1_sel_rd;
    sc_signal< sc_logic > out_stream_V_dest_V_1_sel;
    sc_signal< sc_lv<2> > out_stream_V_dest_V_1_state;
    sc_signal< sc_logic > out_r_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_253;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_exitcond_flatten_reg_253;
    sc_signal< sc_lv<21> > indvar_flatten_reg_130;
    sc_signal< sc_lv<12> > i_reg_141;
    sc_signal< sc_lv<1> > tmp_user_V_reg_152;
    sc_signal< sc_lv<10> > j_reg_167;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_178_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<21> > indvar_flatten_next_fu_184_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<12> > tmp_mid2_v_v_fu_210_p3;
    sc_signal< sc_lv<12> > tmp_mid2_v_v_reg_262;
    sc_signal< sc_lv<1> > tmp_last_V_fu_236_p2;
    sc_signal< sc_lv<1> > tmp_last_V_reg_267;
    sc_signal< sc_lv<10> > j_1_fu_247_p2;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_lv<12> > ap_phi_mux_i_phi_fu_145_p4;
    sc_signal< sc_lv<1> > ap_phi_mux_tmp_user_V_phi_fu_158_p4;
    sc_signal< sc_lv<64> > tmp_4_fu_242_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > exitcond6_fu_190_p2;
    sc_signal< sc_lv<12> > i_s_fu_204_p2;
    sc_signal< sc_lv<10> > j_mid2_fu_196_p3;
    sc_signal< sc_lv<21> > j_cast3_fu_226_p1;
    sc_signal< sc_lv<21> > tmp_mid2_fu_218_p3;
    sc_signal< sc_lv<21> > tmp_2_fu_230_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< bool > ap_block_state5;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<21> ap_const_lv21_0;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<21> ap_const_lv21_1FFE00;
    static const sc_lv<21> ap_const_lv21_1;
    static const sc_lv<10> ap_const_lv10_200;
    static const sc_lv<12> ap_const_lv12_1;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<21> ap_const_lv21_1FFDFF;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_io();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_phi_fu_145_p4();
    void thread_ap_phi_mux_tmp_user_V_phi_fu_158_p4();
    void thread_ap_ready();
    void thread_exitcond6_fu_190_p2();
    void thread_exitcond_flatten_fu_178_p2();
    void thread_i_s_fu_204_p2();
    void thread_indvar_flatten_next_fu_184_p2();
    void thread_j_1_fu_247_p2();
    void thread_j_cast3_fu_226_p1();
    void thread_j_mid2_fu_196_p3();
    void thread_out_r_TDATA();
    void thread_out_r_TDATA_blk_n();
    void thread_out_r_TDEST();
    void thread_out_r_TID();
    void thread_out_r_TKEEP();
    void thread_out_r_TLAST();
    void thread_out_r_TSTRB();
    void thread_out_r_TUSER();
    void thread_out_r_TVALID();
    void thread_out_stream_V_data_V_1_ack_in();
    void thread_out_stream_V_data_V_1_ack_out();
    void thread_out_stream_V_data_V_1_data_out();
    void thread_out_stream_V_data_V_1_load_A();
    void thread_out_stream_V_data_V_1_load_B();
    void thread_out_stream_V_data_V_1_sel();
    void thread_out_stream_V_data_V_1_state_cmp_full();
    void thread_out_stream_V_data_V_1_vld_in();
    void thread_out_stream_V_data_V_1_vld_out();
    void thread_out_stream_V_dest_V_1_ack_in();
    void thread_out_stream_V_dest_V_1_ack_out();
    void thread_out_stream_V_dest_V_1_data_out();
    void thread_out_stream_V_dest_V_1_sel();
    void thread_out_stream_V_dest_V_1_vld_in();
    void thread_out_stream_V_dest_V_1_vld_out();
    void thread_out_stream_V_id_V_1_ack_in();
    void thread_out_stream_V_id_V_1_ack_out();
    void thread_out_stream_V_id_V_1_data_out();
    void thread_out_stream_V_id_V_1_sel();
    void thread_out_stream_V_id_V_1_vld_in();
    void thread_out_stream_V_id_V_1_vld_out();
    void thread_out_stream_V_keep_V_1_ack_in();
    void thread_out_stream_V_keep_V_1_ack_out();
    void thread_out_stream_V_keep_V_1_data_out();
    void thread_out_stream_V_keep_V_1_sel();
    void thread_out_stream_V_keep_V_1_vld_in();
    void thread_out_stream_V_keep_V_1_vld_out();
    void thread_out_stream_V_last_V_1_ack_in();
    void thread_out_stream_V_last_V_1_ack_out();
    void thread_out_stream_V_last_V_1_data_out();
    void thread_out_stream_V_last_V_1_load_A();
    void thread_out_stream_V_last_V_1_load_B();
    void thread_out_stream_V_last_V_1_sel();
    void thread_out_stream_V_last_V_1_state_cmp_full();
    void thread_out_stream_V_last_V_1_vld_in();
    void thread_out_stream_V_last_V_1_vld_out();
    void thread_out_stream_V_strb_V_1_ack_in();
    void thread_out_stream_V_strb_V_1_ack_out();
    void thread_out_stream_V_strb_V_1_data_out();
    void thread_out_stream_V_strb_V_1_sel();
    void thread_out_stream_V_strb_V_1_vld_in();
    void thread_out_stream_V_strb_V_1_vld_out();
    void thread_out_stream_V_user_V_1_ack_in();
    void thread_out_stream_V_user_V_1_ack_out();
    void thread_out_stream_V_user_V_1_data_out();
    void thread_out_stream_V_user_V_1_load_A();
    void thread_out_stream_V_user_V_1_load_B();
    void thread_out_stream_V_user_V_1_sel();
    void thread_out_stream_V_user_V_1_state_cmp_full();
    void thread_out_stream_V_user_V_1_vld_in();
    void thread_out_stream_V_user_V_1_vld_out();
    void thread_test_init_arr_V_address0();
    void thread_test_init_arr_V_ce0();
    void thread_tmp_2_fu_230_p2();
    void thread_tmp_4_fu_242_p1();
    void thread_tmp_last_V_fu_236_p2();
    void thread_tmp_mid2_fu_218_p3();
    void thread_tmp_mid2_v_v_fu_210_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
