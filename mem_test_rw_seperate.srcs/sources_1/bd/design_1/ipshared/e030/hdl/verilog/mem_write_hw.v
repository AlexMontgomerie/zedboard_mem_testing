// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mem_write_hw,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=800.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.020500,HLS_SYN_LAT=517,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=632,HLS_SYN_LUT=1089}" *)

module mem_write_hw (
        ap_clk,
        ap_rst_n,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TKEEP,
        out_r_TSTRB,
        out_r_TUSER,
        out_r_TLAST,
        out_r_TID,
        out_r_TDEST,
        s_axi_CONTROL_BUS_AWVALID,
        s_axi_CONTROL_BUS_AWREADY,
        s_axi_CONTROL_BUS_AWADDR,
        s_axi_CONTROL_BUS_WVALID,
        s_axi_CONTROL_BUS_WREADY,
        s_axi_CONTROL_BUS_WDATA,
        s_axi_CONTROL_BUS_WSTRB,
        s_axi_CONTROL_BUS_ARVALID,
        s_axi_CONTROL_BUS_ARREADY,
        s_axi_CONTROL_BUS_ARADDR,
        s_axi_CONTROL_BUS_RVALID,
        s_axi_CONTROL_BUS_RREADY,
        s_axi_CONTROL_BUS_RDATA,
        s_axi_CONTROL_BUS_RRESP,
        s_axi_CONTROL_BUS_BVALID,
        s_axi_CONTROL_BUS_BREADY,
        s_axi_CONTROL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;
parameter    C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [63:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [7:0] out_r_TKEEP;
output  [7:0] out_r_TSTRB;
output  [3:0] out_r_TUSER;
output  [0:0] out_r_TLAST;
output  [4:0] out_r_TID;
output  [4:0] out_r_TDEST;
input   s_axi_CONTROL_BUS_AWVALID;
output   s_axi_CONTROL_BUS_AWREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_AWADDR;
input   s_axi_CONTROL_BUS_WVALID;
output   s_axi_CONTROL_BUS_WREADY;
input  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_WDATA;
input  [C_S_AXI_CONTROL_BUS_WSTRB_WIDTH - 1:0] s_axi_CONTROL_BUS_WSTRB;
input   s_axi_CONTROL_BUS_ARVALID;
output   s_axi_CONTROL_BUS_ARREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_ARADDR;
output   s_axi_CONTROL_BUS_RVALID;
input   s_axi_CONTROL_BUS_RREADY;
output  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_RDATA;
output  [1:0] s_axi_CONTROL_BUS_RRESP;
output   s_axi_CONTROL_BUS_BVALID;
input   s_axi_CONTROL_BUS_BREADY;
output  [1:0] s_axi_CONTROL_BUS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [63:0] out_data_V_1_data_out;
wire    out_data_V_1_vld_in;
wire    out_data_V_1_vld_out;
wire    out_data_V_1_ack_in;
wire    out_data_V_1_ack_out;
reg   [63:0] out_data_V_1_payload_A;
reg   [63:0] out_data_V_1_payload_B;
reg    out_data_V_1_sel_rd;
reg    out_data_V_1_sel_wr;
wire    out_data_V_1_sel;
wire    out_data_V_1_load_A;
wire    out_data_V_1_load_B;
reg   [1:0] out_data_V_1_state;
wire    out_data_V_1_state_cmp_full;
reg   [7:0] out_keep_V_1_data_out;
wire    out_keep_V_1_vld_in;
wire    out_keep_V_1_vld_out;
wire    out_keep_V_1_ack_in;
wire    out_keep_V_1_ack_out;
reg   [7:0] out_keep_V_1_payload_A;
reg   [7:0] out_keep_V_1_payload_B;
reg    out_keep_V_1_sel_rd;
reg    out_keep_V_1_sel_wr;
wire    out_keep_V_1_sel;
wire    out_keep_V_1_load_A;
wire    out_keep_V_1_load_B;
reg   [1:0] out_keep_V_1_state;
wire    out_keep_V_1_state_cmp_full;
reg   [7:0] out_strb_V_1_data_out;
wire    out_strb_V_1_vld_in;
wire    out_strb_V_1_vld_out;
wire    out_strb_V_1_ack_in;
wire    out_strb_V_1_ack_out;
reg   [7:0] out_strb_V_1_payload_A;
reg   [7:0] out_strb_V_1_payload_B;
reg    out_strb_V_1_sel_rd;
reg    out_strb_V_1_sel_wr;
wire    out_strb_V_1_sel;
wire    out_strb_V_1_load_A;
wire    out_strb_V_1_load_B;
reg   [1:0] out_strb_V_1_state;
wire    out_strb_V_1_state_cmp_full;
reg   [3:0] out_user_V_1_data_out;
wire    out_user_V_1_vld_in;
wire    out_user_V_1_vld_out;
wire    out_user_V_1_ack_in;
wire    out_user_V_1_ack_out;
reg   [3:0] out_user_V_1_payload_A;
reg   [3:0] out_user_V_1_payload_B;
reg    out_user_V_1_sel_rd;
reg    out_user_V_1_sel_wr;
wire    out_user_V_1_sel;
wire    out_user_V_1_load_A;
wire    out_user_V_1_load_B;
reg   [1:0] out_user_V_1_state;
wire    out_user_V_1_state_cmp_full;
reg   [0:0] out_last_V_1_data_out;
wire    out_last_V_1_vld_in;
wire    out_last_V_1_vld_out;
wire    out_last_V_1_ack_in;
wire    out_last_V_1_ack_out;
reg   [0:0] out_last_V_1_payload_A;
reg   [0:0] out_last_V_1_payload_B;
reg    out_last_V_1_sel_rd;
reg    out_last_V_1_sel_wr;
wire    out_last_V_1_sel;
wire    out_last_V_1_load_A;
wire    out_last_V_1_load_B;
reg   [1:0] out_last_V_1_state;
wire    out_last_V_1_state_cmp_full;
reg   [4:0] out_id_V_1_data_out;
wire    out_id_V_1_vld_in;
wire    out_id_V_1_vld_out;
wire    out_id_V_1_ack_in;
wire    out_id_V_1_ack_out;
reg   [4:0] out_id_V_1_payload_A;
reg   [4:0] out_id_V_1_payload_B;
reg    out_id_V_1_sel_rd;
reg    out_id_V_1_sel_wr;
wire    out_id_V_1_sel;
wire    out_id_V_1_load_A;
wire    out_id_V_1_load_B;
reg   [1:0] out_id_V_1_state;
wire    out_id_V_1_state_cmp_full;
reg   [4:0] out_dest_V_1_data_out;
wire    out_dest_V_1_vld_in;
wire    out_dest_V_1_vld_out;
wire    out_dest_V_1_ack_in;
wire    out_dest_V_1_ack_out;
reg   [4:0] out_dest_V_1_payload_A;
reg   [4:0] out_dest_V_1_payload_B;
reg    out_dest_V_1_sel_rd;
reg    out_dest_V_1_sel_wr;
wire    out_dest_V_1_sel;
wire    out_dest_V_1_load_A;
wire    out_dest_V_1_load_B;
reg   [1:0] out_dest_V_1_state;
wire    out_dest_V_1_state_cmp_full;
wire   [31:0] activity;
wire   [63:0] mask;
reg   [63:0] mask_read_reg_84;
reg   [31:0] activity_read_reg_89;
wire    grp_mem_write_fu_60_ap_start;
wire    grp_mem_write_fu_60_ap_done;
wire    grp_mem_write_fu_60_ap_idle;
wire    grp_mem_write_fu_60_ap_ready;
wire   [63:0] grp_mem_write_fu_60_out_r_TDATA;
wire    grp_mem_write_fu_60_out_r_TVALID;
wire    grp_mem_write_fu_60_out_r_TREADY;
wire   [7:0] grp_mem_write_fu_60_out_r_TKEEP;
wire   [7:0] grp_mem_write_fu_60_out_r_TSTRB;
wire   [3:0] grp_mem_write_fu_60_out_r_TUSER;
wire   [0:0] grp_mem_write_fu_60_out_r_TLAST;
wire   [4:0] grp_mem_write_fu_60_out_r_TID;
wire   [4:0] grp_mem_write_fu_60_out_r_TDEST;
reg    ap_reg_grp_mem_write_fu_60_ap_start;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    ap_block_state3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 out_data_V_1_sel_rd = 1'b0;
#0 out_data_V_1_sel_wr = 1'b0;
#0 out_data_V_1_state = 2'd0;
#0 out_keep_V_1_sel_rd = 1'b0;
#0 out_keep_V_1_sel_wr = 1'b0;
#0 out_keep_V_1_state = 2'd0;
#0 out_strb_V_1_sel_rd = 1'b0;
#0 out_strb_V_1_sel_wr = 1'b0;
#0 out_strb_V_1_state = 2'd0;
#0 out_user_V_1_sel_rd = 1'b0;
#0 out_user_V_1_sel_wr = 1'b0;
#0 out_user_V_1_state = 2'd0;
#0 out_last_V_1_sel_rd = 1'b0;
#0 out_last_V_1_sel_wr = 1'b0;
#0 out_last_V_1_state = 2'd0;
#0 out_id_V_1_sel_rd = 1'b0;
#0 out_id_V_1_sel_wr = 1'b0;
#0 out_id_V_1_state = 2'd0;
#0 out_dest_V_1_sel_rd = 1'b0;
#0 out_dest_V_1_sel_wr = 1'b0;
#0 out_dest_V_1_state = 2'd0;
#0 ap_reg_grp_mem_write_fu_60_ap_start = 1'b0;
end

mem_write_hw_CONTROL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_BUS_DATA_WIDTH ))
mem_write_hw_CONTROL_BUS_s_axi_U(
    .AWVALID(s_axi_CONTROL_BUS_AWVALID),
    .AWREADY(s_axi_CONTROL_BUS_AWREADY),
    .AWADDR(s_axi_CONTROL_BUS_AWADDR),
    .WVALID(s_axi_CONTROL_BUS_WVALID),
    .WREADY(s_axi_CONTROL_BUS_WREADY),
    .WDATA(s_axi_CONTROL_BUS_WDATA),
    .WSTRB(s_axi_CONTROL_BUS_WSTRB),
    .ARVALID(s_axi_CONTROL_BUS_ARVALID),
    .ARREADY(s_axi_CONTROL_BUS_ARREADY),
    .ARADDR(s_axi_CONTROL_BUS_ARADDR),
    .RVALID(s_axi_CONTROL_BUS_RVALID),
    .RREADY(s_axi_CONTROL_BUS_RREADY),
    .RDATA(s_axi_CONTROL_BUS_RDATA),
    .RRESP(s_axi_CONTROL_BUS_RRESP),
    .BVALID(s_axi_CONTROL_BUS_BVALID),
    .BREADY(s_axi_CONTROL_BUS_BREADY),
    .BRESP(s_axi_CONTROL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .activity(activity),
    .mask(mask)
);

mem_write grp_mem_write_fu_60(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_mem_write_fu_60_ap_start),
    .ap_done(grp_mem_write_fu_60_ap_done),
    .ap_idle(grp_mem_write_fu_60_ap_idle),
    .ap_ready(grp_mem_write_fu_60_ap_ready),
    .out_r_TDATA(grp_mem_write_fu_60_out_r_TDATA),
    .out_r_TVALID(grp_mem_write_fu_60_out_r_TVALID),
    .out_r_TREADY(grp_mem_write_fu_60_out_r_TREADY),
    .out_r_TKEEP(grp_mem_write_fu_60_out_r_TKEEP),
    .out_r_TSTRB(grp_mem_write_fu_60_out_r_TSTRB),
    .out_r_TUSER(grp_mem_write_fu_60_out_r_TUSER),
    .out_r_TLAST(grp_mem_write_fu_60_out_r_TLAST),
    .out_r_TID(grp_mem_write_fu_60_out_r_TID),
    .out_r_TDEST(grp_mem_write_fu_60_out_r_TDEST),
    .activity(activity_read_reg_89),
    .mask(mask_read_reg_84)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_mem_write_fu_60_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_reg_grp_mem_write_fu_60_ap_start <= 1'b1;
        end else if ((grp_mem_write_fu_60_ap_ready == 1'b1)) begin
            ap_reg_grp_mem_write_fu_60_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_data_V_1_ack_out == 1'b1) & (out_data_V_1_vld_out == 1'b1))) begin
            out_data_V_1_sel_rd <= ~out_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_data_V_1_ack_in == 1'b1) & (out_data_V_1_vld_in == 1'b1))) begin
            out_data_V_1_sel_wr <= ~out_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_V_1_state <= 2'd0;
    end else begin
        if ((((out_data_V_1_state == 2'd2) & (out_data_V_1_vld_in == 1'b0)) | ((out_data_V_1_state == 2'd3) & (out_data_V_1_vld_in == 1'b0) & (out_data_V_1_ack_out == 1'b1)))) begin
            out_data_V_1_state <= 2'd2;
        end else if ((((out_data_V_1_state == 2'd1) & (out_data_V_1_ack_out == 1'b0)) | ((out_data_V_1_state == 2'd3) & (out_data_V_1_ack_out == 1'b0) & (out_data_V_1_vld_in == 1'b1)))) begin
            out_data_V_1_state <= 2'd1;
        end else if (((~((out_data_V_1_vld_in == 1'b0) & (out_data_V_1_ack_out == 1'b1)) & ~((out_data_V_1_ack_out == 1'b0) & (out_data_V_1_vld_in == 1'b1)) & (out_data_V_1_state == 2'd3)) | ((out_data_V_1_state == 2'd1) & (out_data_V_1_ack_out == 1'b1)) | ((out_data_V_1_state == 2'd2) & (out_data_V_1_vld_in == 1'b1)))) begin
            out_data_V_1_state <= 2'd3;
        end else begin
            out_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_dest_V_1_ack_out == 1'b1) & (out_dest_V_1_vld_out == 1'b1))) begin
            out_dest_V_1_sel_rd <= ~out_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_dest_V_1_ack_in == 1'b1) & (out_dest_V_1_vld_in == 1'b1))) begin
            out_dest_V_1_sel_wr <= ~out_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_dest_V_1_state <= 2'd0;
    end else begin
        if ((((out_dest_V_1_state == 2'd2) & (out_dest_V_1_vld_in == 1'b0)) | ((out_dest_V_1_state == 2'd3) & (out_dest_V_1_vld_in == 1'b0) & (out_dest_V_1_ack_out == 1'b1)))) begin
            out_dest_V_1_state <= 2'd2;
        end else if ((((out_dest_V_1_state == 2'd1) & (out_dest_V_1_ack_out == 1'b0)) | ((out_dest_V_1_state == 2'd3) & (out_dest_V_1_ack_out == 1'b0) & (out_dest_V_1_vld_in == 1'b1)))) begin
            out_dest_V_1_state <= 2'd1;
        end else if (((~((out_dest_V_1_vld_in == 1'b0) & (out_dest_V_1_ack_out == 1'b1)) & ~((out_dest_V_1_ack_out == 1'b0) & (out_dest_V_1_vld_in == 1'b1)) & (out_dest_V_1_state == 2'd3)) | ((out_dest_V_1_state == 2'd1) & (out_dest_V_1_ack_out == 1'b1)) | ((out_dest_V_1_state == 2'd2) & (out_dest_V_1_vld_in == 1'b1)))) begin
            out_dest_V_1_state <= 2'd3;
        end else begin
            out_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_id_V_1_ack_out == 1'b1) & (out_id_V_1_vld_out == 1'b1))) begin
            out_id_V_1_sel_rd <= ~out_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_id_V_1_ack_in == 1'b1) & (out_id_V_1_vld_in == 1'b1))) begin
            out_id_V_1_sel_wr <= ~out_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_id_V_1_state <= 2'd0;
    end else begin
        if ((((out_id_V_1_state == 2'd2) & (out_id_V_1_vld_in == 1'b0)) | ((out_id_V_1_state == 2'd3) & (out_id_V_1_vld_in == 1'b0) & (out_id_V_1_ack_out == 1'b1)))) begin
            out_id_V_1_state <= 2'd2;
        end else if ((((out_id_V_1_state == 2'd1) & (out_id_V_1_ack_out == 1'b0)) | ((out_id_V_1_state == 2'd3) & (out_id_V_1_ack_out == 1'b0) & (out_id_V_1_vld_in == 1'b1)))) begin
            out_id_V_1_state <= 2'd1;
        end else if (((~((out_id_V_1_vld_in == 1'b0) & (out_id_V_1_ack_out == 1'b1)) & ~((out_id_V_1_ack_out == 1'b0) & (out_id_V_1_vld_in == 1'b1)) & (out_id_V_1_state == 2'd3)) | ((out_id_V_1_state == 2'd1) & (out_id_V_1_ack_out == 1'b1)) | ((out_id_V_1_state == 2'd2) & (out_id_V_1_vld_in == 1'b1)))) begin
            out_id_V_1_state <= 2'd3;
        end else begin
            out_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_keep_V_1_ack_out == 1'b1) & (out_keep_V_1_vld_out == 1'b1))) begin
            out_keep_V_1_sel_rd <= ~out_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_keep_V_1_ack_in == 1'b1) & (out_keep_V_1_vld_in == 1'b1))) begin
            out_keep_V_1_sel_wr <= ~out_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_keep_V_1_state <= 2'd0;
    end else begin
        if ((((out_keep_V_1_state == 2'd2) & (out_keep_V_1_vld_in == 1'b0)) | ((out_keep_V_1_state == 2'd3) & (out_keep_V_1_vld_in == 1'b0) & (out_keep_V_1_ack_out == 1'b1)))) begin
            out_keep_V_1_state <= 2'd2;
        end else if ((((out_keep_V_1_state == 2'd1) & (out_keep_V_1_ack_out == 1'b0)) | ((out_keep_V_1_state == 2'd3) & (out_keep_V_1_ack_out == 1'b0) & (out_keep_V_1_vld_in == 1'b1)))) begin
            out_keep_V_1_state <= 2'd1;
        end else if (((~((out_keep_V_1_vld_in == 1'b0) & (out_keep_V_1_ack_out == 1'b1)) & ~((out_keep_V_1_ack_out == 1'b0) & (out_keep_V_1_vld_in == 1'b1)) & (out_keep_V_1_state == 2'd3)) | ((out_keep_V_1_state == 2'd1) & (out_keep_V_1_ack_out == 1'b1)) | ((out_keep_V_1_state == 2'd2) & (out_keep_V_1_vld_in == 1'b1)))) begin
            out_keep_V_1_state <= 2'd3;
        end else begin
            out_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_last_V_1_ack_out == 1'b1) & (out_last_V_1_vld_out == 1'b1))) begin
            out_last_V_1_sel_rd <= ~out_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_last_V_1_ack_in == 1'b1) & (out_last_V_1_vld_in == 1'b1))) begin
            out_last_V_1_sel_wr <= ~out_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_last_V_1_state <= 2'd0;
    end else begin
        if ((((out_last_V_1_state == 2'd2) & (out_last_V_1_vld_in == 1'b0)) | ((out_last_V_1_state == 2'd3) & (out_last_V_1_vld_in == 1'b0) & (out_last_V_1_ack_out == 1'b1)))) begin
            out_last_V_1_state <= 2'd2;
        end else if ((((out_last_V_1_state == 2'd1) & (out_last_V_1_ack_out == 1'b0)) | ((out_last_V_1_state == 2'd3) & (out_last_V_1_ack_out == 1'b0) & (out_last_V_1_vld_in == 1'b1)))) begin
            out_last_V_1_state <= 2'd1;
        end else if (((~((out_last_V_1_vld_in == 1'b0) & (out_last_V_1_ack_out == 1'b1)) & ~((out_last_V_1_ack_out == 1'b0) & (out_last_V_1_vld_in == 1'b1)) & (out_last_V_1_state == 2'd3)) | ((out_last_V_1_state == 2'd1) & (out_last_V_1_ack_out == 1'b1)) | ((out_last_V_1_state == 2'd2) & (out_last_V_1_vld_in == 1'b1)))) begin
            out_last_V_1_state <= 2'd3;
        end else begin
            out_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_strb_V_1_ack_out == 1'b1) & (out_strb_V_1_vld_out == 1'b1))) begin
            out_strb_V_1_sel_rd <= ~out_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_strb_V_1_ack_in == 1'b1) & (out_strb_V_1_vld_in == 1'b1))) begin
            out_strb_V_1_sel_wr <= ~out_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_strb_V_1_state <= 2'd0;
    end else begin
        if ((((out_strb_V_1_state == 2'd2) & (out_strb_V_1_vld_in == 1'b0)) | ((out_strb_V_1_state == 2'd3) & (out_strb_V_1_vld_in == 1'b0) & (out_strb_V_1_ack_out == 1'b1)))) begin
            out_strb_V_1_state <= 2'd2;
        end else if ((((out_strb_V_1_state == 2'd1) & (out_strb_V_1_ack_out == 1'b0)) | ((out_strb_V_1_state == 2'd3) & (out_strb_V_1_ack_out == 1'b0) & (out_strb_V_1_vld_in == 1'b1)))) begin
            out_strb_V_1_state <= 2'd1;
        end else if (((~((out_strb_V_1_vld_in == 1'b0) & (out_strb_V_1_ack_out == 1'b1)) & ~((out_strb_V_1_ack_out == 1'b0) & (out_strb_V_1_vld_in == 1'b1)) & (out_strb_V_1_state == 2'd3)) | ((out_strb_V_1_state == 2'd1) & (out_strb_V_1_ack_out == 1'b1)) | ((out_strb_V_1_state == 2'd2) & (out_strb_V_1_vld_in == 1'b1)))) begin
            out_strb_V_1_state <= 2'd3;
        end else begin
            out_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_user_V_1_ack_out == 1'b1) & (out_user_V_1_vld_out == 1'b1))) begin
            out_user_V_1_sel_rd <= ~out_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_user_V_1_ack_in == 1'b1) & (out_user_V_1_vld_in == 1'b1))) begin
            out_user_V_1_sel_wr <= ~out_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_user_V_1_state <= 2'd0;
    end else begin
        if ((((out_user_V_1_state == 2'd2) & (out_user_V_1_vld_in == 1'b0)) | ((out_user_V_1_state == 2'd3) & (out_user_V_1_vld_in == 1'b0) & (out_user_V_1_ack_out == 1'b1)))) begin
            out_user_V_1_state <= 2'd2;
        end else if ((((out_user_V_1_state == 2'd1) & (out_user_V_1_ack_out == 1'b0)) | ((out_user_V_1_state == 2'd3) & (out_user_V_1_ack_out == 1'b0) & (out_user_V_1_vld_in == 1'b1)))) begin
            out_user_V_1_state <= 2'd1;
        end else if (((~((out_user_V_1_vld_in == 1'b0) & (out_user_V_1_ack_out == 1'b1)) & ~((out_user_V_1_ack_out == 1'b0) & (out_user_V_1_vld_in == 1'b1)) & (out_user_V_1_state == 2'd3)) | ((out_user_V_1_state == 2'd1) & (out_user_V_1_ack_out == 1'b1)) | ((out_user_V_1_state == 2'd2) & (out_user_V_1_vld_in == 1'b1)))) begin
            out_user_V_1_state <= 2'd3;
        end else begin
            out_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        activity_read_reg_89 <= activity;
        mask_read_reg_84 <= mask;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_V_1_load_A == 1'b1)) begin
        out_data_V_1_payload_A <= grp_mem_write_fu_60_out_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_V_1_load_B == 1'b1)) begin
        out_data_V_1_payload_B <= grp_mem_write_fu_60_out_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((out_dest_V_1_load_A == 1'b1)) begin
        out_dest_V_1_payload_A <= grp_mem_write_fu_60_out_r_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((out_dest_V_1_load_B == 1'b1)) begin
        out_dest_V_1_payload_B <= grp_mem_write_fu_60_out_r_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((out_id_V_1_load_A == 1'b1)) begin
        out_id_V_1_payload_A <= grp_mem_write_fu_60_out_r_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((out_id_V_1_load_B == 1'b1)) begin
        out_id_V_1_payload_B <= grp_mem_write_fu_60_out_r_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((out_keep_V_1_load_A == 1'b1)) begin
        out_keep_V_1_payload_A <= grp_mem_write_fu_60_out_r_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((out_keep_V_1_load_B == 1'b1)) begin
        out_keep_V_1_payload_B <= grp_mem_write_fu_60_out_r_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((out_last_V_1_load_A == 1'b1)) begin
        out_last_V_1_payload_A <= grp_mem_write_fu_60_out_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((out_last_V_1_load_B == 1'b1)) begin
        out_last_V_1_payload_B <= grp_mem_write_fu_60_out_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((out_strb_V_1_load_A == 1'b1)) begin
        out_strb_V_1_payload_A <= grp_mem_write_fu_60_out_r_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((out_strb_V_1_load_B == 1'b1)) begin
        out_strb_V_1_payload_B <= grp_mem_write_fu_60_out_r_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((out_user_V_1_load_A == 1'b1)) begin
        out_user_V_1_payload_A <= grp_mem_write_fu_60_out_r_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((out_user_V_1_load_B == 1'b1)) begin
        out_user_V_1_payload_B <= grp_mem_write_fu_60_out_r_TUSER;
    end
end

always @ (*) begin
    if ((~((out_keep_V_1_ack_in == 1'b0) | (out_dest_V_1_ack_in == 1'b0) | (out_data_V_1_ack_in == 1'b0) | (out_id_V_1_ack_in == 1'b0) | (out_last_V_1_ack_in == 1'b0) | (out_user_V_1_ack_in == 1'b0) | (out_strb_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_keep_V_1_ack_in == 1'b0) | (out_dest_V_1_ack_in == 1'b0) | (out_data_V_1_ack_in == 1'b0) | (out_id_V_1_ack_in == 1'b0) | (out_last_V_1_ack_in == 1'b0) | (out_user_V_1_ack_in == 1'b0) | (out_strb_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_V_1_sel == 1'b1)) begin
        out_data_V_1_data_out = out_data_V_1_payload_B;
    end else begin
        out_data_V_1_data_out = out_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((out_dest_V_1_sel == 1'b1)) begin
        out_dest_V_1_data_out = out_dest_V_1_payload_B;
    end else begin
        out_dest_V_1_data_out = out_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((out_id_V_1_sel == 1'b1)) begin
        out_id_V_1_data_out = out_id_V_1_payload_B;
    end else begin
        out_id_V_1_data_out = out_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((out_keep_V_1_sel == 1'b1)) begin
        out_keep_V_1_data_out = out_keep_V_1_payload_B;
    end else begin
        out_keep_V_1_data_out = out_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((out_last_V_1_sel == 1'b1)) begin
        out_last_V_1_data_out = out_last_V_1_payload_B;
    end else begin
        out_last_V_1_data_out = out_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((out_strb_V_1_sel == 1'b1)) begin
        out_strb_V_1_data_out = out_strb_V_1_payload_B;
    end else begin
        out_strb_V_1_data_out = out_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((out_user_V_1_sel == 1'b1)) begin
        out_user_V_1_data_out = out_user_V_1_payload_B;
    end else begin
        out_user_V_1_data_out = out_user_V_1_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_mem_write_fu_60_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((out_keep_V_1_ack_in == 1'b0) | (out_dest_V_1_ack_in == 1'b0) | (out_data_V_1_ack_in == 1'b0) | (out_id_V_1_ack_in == 1'b0) | (out_last_V_1_ack_in == 1'b0) | (out_user_V_1_ack_in == 1'b0) | (out_strb_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state3 = ((out_keep_V_1_ack_in == 1'b0) | (out_dest_V_1_ack_in == 1'b0) | (out_data_V_1_ack_in == 1'b0) | (out_id_V_1_ack_in == 1'b0) | (out_last_V_1_ack_in == 1'b0) | (out_user_V_1_ack_in == 1'b0) | (out_strb_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_mem_write_fu_60_ap_start = ap_reg_grp_mem_write_fu_60_ap_start;

assign grp_mem_write_fu_60_out_r_TREADY = out_dest_V_1_state[1'd1];

assign out_data_V_1_ack_in = out_data_V_1_state[1'd1];

assign out_data_V_1_ack_out = out_r_TREADY;

assign out_data_V_1_load_A = (out_data_V_1_state_cmp_full & ~out_data_V_1_sel_wr);

assign out_data_V_1_load_B = (out_data_V_1_state_cmp_full & out_data_V_1_sel_wr);

assign out_data_V_1_sel = out_data_V_1_sel_rd;

assign out_data_V_1_state_cmp_full = ((out_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_data_V_1_vld_in = grp_mem_write_fu_60_out_r_TVALID;

assign out_data_V_1_vld_out = out_data_V_1_state[1'd0];

assign out_dest_V_1_ack_in = out_dest_V_1_state[1'd1];

assign out_dest_V_1_ack_out = out_r_TREADY;

assign out_dest_V_1_load_A = (out_dest_V_1_state_cmp_full & ~out_dest_V_1_sel_wr);

assign out_dest_V_1_load_B = (out_dest_V_1_state_cmp_full & out_dest_V_1_sel_wr);

assign out_dest_V_1_sel = out_dest_V_1_sel_rd;

assign out_dest_V_1_state_cmp_full = ((out_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_dest_V_1_vld_in = grp_mem_write_fu_60_out_r_TVALID;

assign out_dest_V_1_vld_out = out_dest_V_1_state[1'd0];

assign out_id_V_1_ack_in = out_id_V_1_state[1'd1];

assign out_id_V_1_ack_out = out_r_TREADY;

assign out_id_V_1_load_A = (out_id_V_1_state_cmp_full & ~out_id_V_1_sel_wr);

assign out_id_V_1_load_B = (out_id_V_1_state_cmp_full & out_id_V_1_sel_wr);

assign out_id_V_1_sel = out_id_V_1_sel_rd;

assign out_id_V_1_state_cmp_full = ((out_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_id_V_1_vld_in = grp_mem_write_fu_60_out_r_TVALID;

assign out_id_V_1_vld_out = out_id_V_1_state[1'd0];

assign out_keep_V_1_ack_in = out_keep_V_1_state[1'd1];

assign out_keep_V_1_ack_out = out_r_TREADY;

assign out_keep_V_1_load_A = (out_keep_V_1_state_cmp_full & ~out_keep_V_1_sel_wr);

assign out_keep_V_1_load_B = (out_keep_V_1_state_cmp_full & out_keep_V_1_sel_wr);

assign out_keep_V_1_sel = out_keep_V_1_sel_rd;

assign out_keep_V_1_state_cmp_full = ((out_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_keep_V_1_vld_in = grp_mem_write_fu_60_out_r_TVALID;

assign out_keep_V_1_vld_out = out_keep_V_1_state[1'd0];

assign out_last_V_1_ack_in = out_last_V_1_state[1'd1];

assign out_last_V_1_ack_out = out_r_TREADY;

assign out_last_V_1_load_A = (out_last_V_1_state_cmp_full & ~out_last_V_1_sel_wr);

assign out_last_V_1_load_B = (out_last_V_1_state_cmp_full & out_last_V_1_sel_wr);

assign out_last_V_1_sel = out_last_V_1_sel_rd;

assign out_last_V_1_state_cmp_full = ((out_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_last_V_1_vld_in = grp_mem_write_fu_60_out_r_TVALID;

assign out_last_V_1_vld_out = out_last_V_1_state[1'd0];

assign out_r_TDATA = out_data_V_1_data_out;

assign out_r_TDEST = out_dest_V_1_data_out;

assign out_r_TID = out_id_V_1_data_out;

assign out_r_TKEEP = out_keep_V_1_data_out;

assign out_r_TLAST = out_last_V_1_data_out;

assign out_r_TSTRB = out_strb_V_1_data_out;

assign out_r_TUSER = out_user_V_1_data_out;

assign out_r_TVALID = out_dest_V_1_state[1'd0];

assign out_strb_V_1_ack_in = out_strb_V_1_state[1'd1];

assign out_strb_V_1_ack_out = out_r_TREADY;

assign out_strb_V_1_load_A = (out_strb_V_1_state_cmp_full & ~out_strb_V_1_sel_wr);

assign out_strb_V_1_load_B = (out_strb_V_1_state_cmp_full & out_strb_V_1_sel_wr);

assign out_strb_V_1_sel = out_strb_V_1_sel_rd;

assign out_strb_V_1_state_cmp_full = ((out_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_strb_V_1_vld_in = grp_mem_write_fu_60_out_r_TVALID;

assign out_strb_V_1_vld_out = out_strb_V_1_state[1'd0];

assign out_user_V_1_ack_in = out_user_V_1_state[1'd1];

assign out_user_V_1_ack_out = out_r_TREADY;

assign out_user_V_1_load_A = (out_user_V_1_state_cmp_full & ~out_user_V_1_sel_wr);

assign out_user_V_1_load_B = (out_user_V_1_state_cmp_full & out_user_V_1_sel_wr);

assign out_user_V_1_sel = out_user_V_1_sel_rd;

assign out_user_V_1_state_cmp_full = ((out_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_user_V_1_vld_in = grp_mem_write_fu_60_out_r_TVALID;

assign out_user_V_1_vld_out = out_user_V_1_state[1'd0];

endmodule //mem_write_hw
