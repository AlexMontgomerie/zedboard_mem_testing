// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mem_write (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TKEEP,
        out_r_TSTRB,
        out_r_TUSER,
        out_r_TLAST,
        out_r_TID,
        out_r_TDEST,
        activity,
        mask
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [63:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [7:0] out_r_TKEEP;
output  [7:0] out_r_TSTRB;
output  [3:0] out_r_TUSER;
output  [0:0] out_r_TLAST;
output  [4:0] out_r_TID;
output  [4:0] out_r_TDEST;
input  [31:0] activity;
input  [63:0] mask;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_r_TVALID;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    out_r_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_244;
reg   [0:0] ap_reg_pp0_iter1_exitcond_reg_244;
reg   [9:0] val_assign_reg_118;
wire   [31:0] activity_read_read_fu_82_p2;
wire   [8:0] tmp_5_fu_141_p1;
reg   [8:0] tmp_5_reg_239;
wire   [0:0] exitcond_fu_145_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_sig_ioackin_out_r_TREADY;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] i_fu_151_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_9_fu_157_p2;
reg   [0:0] tmp_9_reg_253;
wire   [8:0] r_V_fu_167_p2;
reg   [8:0] r_V_reg_258;
wire   [0:0] e_last_V_fu_172_p2;
reg   [0:0] e_last_V_reg_263;
reg   [0:0] ap_reg_pp0_iter1_e_last_V_reg_263;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    lhs_V_pseudo_random_fu_129_ap_start;
wire    lhs_V_pseudo_random_fu_129_ap_done;
wire    lhs_V_pseudo_random_fu_129_ap_idle;
wire    lhs_V_pseudo_random_fu_129_ap_ready;
wire    lhs_V_pseudo_random_fu_129_load;
wire   [63:0] lhs_V_pseudo_random_fu_129_ap_return;
reg    lhs_V_pseudo_random_fu_129_ap_ce;
reg    ap_reg_lhs_V_pseudo_random_fu_129_ap_start;
reg   [63:0] p_s_fu_72;
wire   [63:0] r_V_1_fu_178_p2;
wire   [63:0] w_tmp_V_1_fu_197_p2;
wire   [63:0] r_V_cast_fu_207_p1;
wire    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_out_r_TREADY;
wire   [8:0] tmp_6_fu_163_p1;
wire   [63:0] tmp_fu_191_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_reg_lhs_V_pseudo_random_fu_129_ap_start = 1'b0;
#0 ap_reg_ioackin_out_r_TREADY = 1'b0;
end

pseudo_random lhs_V_pseudo_random_fu_129(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(lhs_V_pseudo_random_fu_129_ap_start),
    .ap_done(lhs_V_pseudo_random_fu_129_ap_done),
    .ap_idle(lhs_V_pseudo_random_fu_129_ap_idle),
    .ap_ready(lhs_V_pseudo_random_fu_129_ap_ready),
    .load(lhs_V_pseudo_random_fu_129_load),
    .ap_return(lhs_V_pseudo_random_fu_129_ap_return),
    .ap_ce(lhs_V_pseudo_random_fu_129_ap_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_out_r_TREADY <= 1'b0;
    end else begin
        if (((ap_reg_pp0_iter1_exitcond_reg_244 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_out_r_TREADY <= 1'b0;
            end else if (((out_r_TREADY == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
                ap_reg_ioackin_out_r_TREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_lhs_V_pseudo_random_fu_129_ap_start <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (32'd2 == activity_read_read_fu_82_p2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_reg_lhs_V_pseudo_random_fu_129_ap_start <= 1'b1;
        end else if ((lhs_V_pseudo_random_fu_129_ap_ready == 1'b1)) begin
            ap_reg_lhs_V_pseudo_random_fu_129_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (32'd0 == activity_read_read_fu_82_p2))) begin
        p_s_fu_72 <= r_V_cast_fu_207_p1;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (32'd1 == activity_read_read_fu_82_p2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        p_s_fu_72 <= w_tmp_V_1_fu_197_p2;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (32'd2 == activity_read_read_fu_82_p2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        p_s_fu_72 <= r_V_1_fu_178_p2;
    end else if (((~(32'd0 == activity_read_read_fu_82_p2) & ~(32'd2 == activity_read_read_fu_82_p2) & ~(32'd1 == activity_read_read_fu_82_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        p_s_fu_72 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_145_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        val_assign_reg_118 <= i_fu_151_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        val_assign_reg_118 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_e_last_V_reg_263 <= e_last_V_reg_263;
        ap_reg_pp0_iter1_exitcond_reg_244 <= exitcond_reg_244;
        exitcond_reg_244 <= exitcond_fu_145_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_145_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_last_V_reg_263 <= e_last_V_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_145_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (32'd0 == activity_read_read_fu_82_p2))) begin
        r_V_reg_258 <= r_V_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_5_reg_239 <= tmp_5_fu_141_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (32'd2 == activity_read_read_fu_82_p2) & (exitcond_fu_145_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_9_reg_253 <= tmp_9_fu_157_p2;
    end
end

always @ (*) begin
    if ((exitcond_fu_145_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_out_r_TREADY == 1'b0)) begin
        ap_sig_ioackin_out_r_TREADY = out_r_TREADY;
    end else begin
        ap_sig_ioackin_out_r_TREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (32'd2 == activity_read_read_fu_82_p2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lhs_V_pseudo_random_fu_129_ap_ce = 1'b1;
    end else begin
        lhs_V_pseudo_random_fu_129_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter1_exitcond_reg_244 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_r_TDATA_blk_n = out_r_TREADY;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter1_exitcond_reg_244 == 1'd0) & (ap_reg_ioackin_out_r_TREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        out_r_TVALID = 1'b1;
    end else begin
        out_r_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_fu_145_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond_fu_145_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign activity_read_read_fu_82_p2 = activity;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state4_io));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state4_io));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((ap_reg_pp0_iter1_exitcond_reg_244 == 1'd0) & (ap_sig_ioackin_out_r_TREADY == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign e_last_V_fu_172_p2 = ((val_assign_reg_118 == 10'd511) ? 1'b1 : 1'b0);

assign exitcond_fu_145_p2 = ((val_assign_reg_118 == 10'd512) ? 1'b1 : 1'b0);

assign i_fu_151_p2 = (val_assign_reg_118 + 10'd1);

assign lhs_V_pseudo_random_fu_129_ap_start = ap_reg_lhs_V_pseudo_random_fu_129_ap_start;

assign lhs_V_pseudo_random_fu_129_load = tmp_9_reg_253;

assign out_r_TDATA = p_s_fu_72;

assign out_r_TDEST = 5'd0;

assign out_r_TID = 5'd0;

assign out_r_TKEEP = 8'd255;

assign out_r_TLAST = ap_reg_pp0_iter1_e_last_V_reg_263;

assign out_r_TSTRB = 8'd255;

assign out_r_TUSER = 4'd0;

assign r_V_1_fu_178_p2 = (mask & lhs_V_pseudo_random_fu_129_ap_return);

assign r_V_cast_fu_207_p1 = r_V_reg_258;

assign r_V_fu_167_p2 = (tmp_6_fu_163_p1 & tmp_5_reg_239);

assign tmp_5_fu_141_p1 = mask[8:0];

assign tmp_6_fu_163_p1 = val_assign_reg_118[8:0];

assign tmp_9_fu_157_p2 = ((val_assign_reg_118 == 10'd0) ? 1'b1 : 1'b0);

assign tmp_fu_191_p2 = (p_s_fu_72 ^ 64'd18446744073709551615);

assign w_tmp_V_1_fu_197_p2 = (tmp_fu_191_p2 & mask);

endmodule //mem_write
